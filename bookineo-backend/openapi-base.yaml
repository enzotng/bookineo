openapi: 3.0.3
info:
  title: Bookineo API
  version: 1.0.0
  description: >
    API de librairie en ligne pour Bookineo : gestion des livres, catégories,
    messagerie, emprunts et utilisateurs.
servers:
  - url: http://localhost:5000

tags:
  - name: Books
    description: Gestion des livres (CRUD)
  - name: Categories
    description: Gestion des catégories (CRUD)
  - name: Messages
    description: Messagerie entre utilisateurs
  - name: Rentals
    description: Emprunts et retours de livres
  - name: Users
    description: Inscription, authentification et profils

paths:
  /api/books:
    get:
      tags: [Books]
      summary: Lister les livres
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Recherche (titre/auteur)
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResultBooks'
    post:
      tags: [Books]
      summary: Créer un livre
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookInput'
      responses:
        '201':
          description: Livre créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/{id}:
    get:
      tags: [Books]
      summary: Obtenir un livre par ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: ID du livre
      responses:
        '200':
          description: Livre trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Book' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Books]
      summary: Mettre à jour un livre
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateBookInput' }
      responses:
        '200':
          description: Livre mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Book' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Books]
      summary: Supprimer un livre
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Supprimé (pas de contenu)
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/categories:
    get:
      tags: [Categories]
      summary: Lister les catégories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Category' }
    post:
      tags: [Categories]
      summary: Créer une catégorie
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCategoryInput' }
      responses:
        '201':
          description: Catégorie créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        '400':
          description: Requête invalide
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/categories/{id}:
    put:
      tags: [Categories]
      summary: Mettre à jour une catégorie
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateCategoryInput' }
      responses:
        '200':
          description: Catégorie mise à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Categories]
      summary: Supprimer une catégorie
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Supprimée (pas de contenu)
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/messages:
    get:
      tags: [Messages]
      summary: Lister les messages
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: userId
          schema: { type: string }
          required: false
          description: Filtrer par utilisateur
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
    post:
      tags: [Messages]
      summary: Envoyer un message
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SendMessageInput' }
      responses:
        '201':
          description: Message envoyé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400':
          description: Requête invalide
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/messages/{id}:
    get:
      tags: [Messages]
      summary: Obtenir un message par ID
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Messages]
      summary: Supprimer un message
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Supprimé (pas de contenu)
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/messages/unread/count:
    get:
      tags: [Messages]
      summary: Compter les messages non lus
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer, example: 3 }

  /api/rentals:
    get:
      tags: [Rentals]
      summary: Lister les locations
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Rental' }

  /api/rentals/rent:
    post:
      tags: [Rentals]
      summary: Emprunter un livre
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RentInput' }
      responses:
        '201':
          description: Location créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Rental' }
        '400':
          description: Requête invalide
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/rentals/return:
    post:
      tags: [Rentals]
      summary: Retourner un livre
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReturnInput' }
      responses:
        '200':
          description: Retour enregistré
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Rental' }
        '400':
          description: Requête invalide
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/rentals/user/{id}:
    get:
      tags: [Rentals]
      summary: Lister les locations d'un utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: ID utilisateur
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Rental' }

  /api/users/register:
    post:
      tags: [Users]
      summary: Inscription
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterInput' }
      responses:
        '201':
          description: Utilisateur créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400':
          description: Requête invalide
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/users/login:
    post:
      tags: [Users]
      summary: Connexion
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginInput' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthToken' }
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/users/profile/{id}:
    get:
      tags: [Users]
      summary: Obtenir le profil utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Users]
      summary: Mettre à jour le profil utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/User' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/users/{id}:
    delete:
      tags: [Users]
      summary: Supprimer un utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Supprimé (pas de contenu)
        '404':
          description: Non trouvé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error: { type: string, example: "Bad Request" }

    # --- Books ---
    Book:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        author: { type: string }
        categoryId: { type: string, format: uuid }
        available: { type: boolean, default: true }
      required: [title, author]
    CreateBookInput:
      type: object
      properties:
        title: { type: string }
        author: { type: string }
        categoryId: { type: string, format: uuid }
      required: [title, author]
    UpdateBookInput:
      allOf:
        - $ref: '#/components/schemas/CreateBookInput'
    PaginationResultBooks:
      type: object
      properties:
        total: { type: integer, example: 42 }
        items:
          type: array
          items: { $ref: '#/components/schemas/Book' }

    # --- Categories ---
    Category:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
      required: [name]
    CreateCategoryInput:
      type: object
      properties:
        name: { type: string }
      required: [name]
    UpdateCategoryInput:
      allOf:
        - $ref: '#/components/schemas/CreateCategoryInput'

    # --- Messages ---
    Message:
      type: object
      properties:
        id: { type: string, format: uuid }
        fromUserId: { type: string, format: uuid }
        toUserId: { type: string, format: uuid }
        content: { type: string }
        read: { type: boolean, default: false }
      required: [toUserId, content]
    SendMessageInput:
      type: object
      properties:
        toUserId: { type: string, format: uuid }
        content: { type: string }
      required: [toUserId, content]

    # --- Rentals ---
    Rental:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        bookId: { type: string, format: uuid }
        rentedAt: { type: string, format: date-time }
        dueDate: { type: string, format: date }
        returnedAt: { type: string, format: date-time, nullable: true }
    RentInput:
      type: object
      properties:
        userId: { type: string, format: uuid }
        bookId: { type: string, format: uuid }
      required: [userId, bookId]
    ReturnInput:
      type: object
      properties:
        rentalId: { type: string, format: uuid }
      required: [rentalId]

    # --- Users ---
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, enum: [user, admin], default: user }
    RegisterInput:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        name: { type: string }
      required: [email, password]
    LoginInput:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
      required: [email, password]
    AuthToken:
      type: object
      properties:
        token: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
